{"version":3,"file":"sha1.min.js","sources":["../node_modules/string-encode/string-encode.js","../sha1.js","../rawSha1.js"],"sourcesContent":["/**\n * Convert different types of JavaScript String to/from Uint8Array.\n *\n * @author Dumitru Uzun (DUzun.Me)\n * @version 0.2.1\n */\n\n/*requires Uint8Array*/\n/*globals escape, unescape, encodeURI, decodeURIComponent, btoa*/\n\nexport const chr = String.fromCharCode;\n\nexport function ord(chr) {\n    return chr.charCodeAt(0);\n}\n\nexport function buffer2bin(buf) {\n    buf = view8(buf);\n    return chr.apply(String, buf);\n}\n\n/**\n * Get the hex representation of a buffer (TypedArray)\n *\n * @requires String.prototype.padStart()\n *\n * @param   {TypedArray}  buf Uint8Array is desirable, cause it is consistent regardless of the endianness\n *\n * @return  {String} The hex representation of the buf\n */\nexport function buffer2hex(buf) {\n    const bpe = buf.BYTES_PER_ELEMENT << 1;\n    return buf.reduce((r, c) => r += (c >>> 0).toString(16).padStart(bpe,'0'), '');\n}\n\nexport function buffer2str(buf, asUtf8) {\n    if(typeof buf == 'string') return buf;\n    buf = buffer2bin(buf);\n    if (asUtf8 !== false && !isASCII(buf)) {\n        if(asUtf8) {\n            buf = utf8Decode(buf);\n        } else if(asUtf8 == undefined) {\n            try {\n                buf = utf8Decode(buf);\n            } catch(err) {}\n        }\n    }\n    return buf;\n}\n\nexport function str2buffer(str, asUtf8) {\n    str = String(str);\n    if(asUtf8 == undefined) {\n        // Some guessing\n        asUtf8 = hasMultibyte(str); // || !isASCII(str)\n    }\n    if (asUtf8) {\n        str = utf8Encode(str);\n    }\n\n    // Smaller x2\n    // return new Uint8Array(String(str).split('').map(ord));\n\n    // Faster x3-4\n    let len = str.length;\n    const buf = new Uint8Array(len);\n    while(len--) buf[len] = str.charCodeAt(len);\n    return buf;\n}\n\nconst nonHexDigitRE = /[^0-9a-f]/g;\n\n/**\n * Read a hex string into a buffer (Uint8Array), ignoring non-hex chars.\n *\n * @param   {String}  str\n *\n * @return  {Uint8Array}\n */\nexport function hex2buffer(str) {\n    str = str.replace(nonHexDigitRE, '');\n    const len = str.length;\n    const ret = new Uint8Array((len + 1) >>> 1);\n\n    for(let i=0; i<len; i+=2) {\n        ret[i >>> 1] = parseInt(str.slice(i, i+2), 16);\n    }\n\n    return ret;\n}\n\n/**\n * This method is a replacement of Buffer.toString(enc)\n * for Browser, where Buffer is not available.\n *\n * @requires btoa\n *\n * @this {Uint8Array}\n *\n * @param   {String}  enc  'binary' | 'hex' | 'base64' | 'utf8' | undefined\n *\n * @return  {String}\n */\nexport function toString(enc) {\n    // The Node.js equivalent would be something like:\n    // if(typeof Buffer == 'function') {\n    //     if(enc === false) enc = 'binary';\n    //     if(enc === true) enc = 'utf8';\n    //     return Buffer.from(this.buffer, this.byteOffset, this.byteLength).toString(enc);\n    // }\n    switch(enc) {\n        case false:\n        case 'binary': return buffer2bin(this);\n        case 'hex': return buffer2hex(this);\n        case 'base64': return btoa(buffer2bin(this));\n        case 'utf8': enc = true; break;\n    }\n    return buffer2str(this, enc);\n}\n\nexport function view8(buf, start, len) {\n    // If buf is a Buffer, we still want to make it an Uint8Array\n    if(!start && !len && buf instanceof Uint8Array && !buf.copy) return buf;\n    start = start >>> 0;\n    if(len == undefined) len = buf.byteLength - start;\n    return new Uint8Array(buf.buffer, buf.byteOffset+start, len);\n}\n\nlet _isLittleEndian;\nexport function isLittleEndian() {\n    if(_isLittleEndian !== undefined) return _isLittleEndian;\n    _isLittleEndian = !!(new Uint8Array(new Uint16Array([1]).buffer)[0]);\n    isLittleEndian = () => _isLittleEndian;\n    return _isLittleEndian;\n}\n\nexport function switchEndianness32(i) {\n    return (i&0xFF)<<24\n        | (i&0xFF00)<<8\n        | i>>8&0xFF00\n        | i>>24&0xFF\n    ;\n}\n\nexport function guessEncoding(str) {\n    if(hasMultibyte(str)) return 'mb';\n\n    // @todo: test which is faster, utf8bytes() or RegExp\n    if(isHEX(str)) return 'hex';\n    // if(isASCII(str)) return 'ascii';\n    // if(isUTF8(str)) return 'utf8';\n\n    let mbLen = utf8bytes(str);\n    if(mbLen) return 'utf8';\n    if(mbLen === 0) return 'ascii';\n    if(mbLen === false) {\n        mbLen = utf8bytes(str, true);\n        if(mbLen) return '~utf8'; // UTF8, but with async characters at the edges\n    }\n    return 'binary';\n}\n\nconst hasMultibyteRE = /([^\\x00-\\xFF])/;\nconst isHEXRE = /^[0-9a-f\\s]*$/i;\nconst isASCIIRE = /^[\\x00-\\x7F]*$/;\nconst isUTF8RE = /^(?:[\\x00-\\x7F]|[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF][\\x80-\\xBF]|[\\xF0-\\xF7][\\x80-\\xBF][\\x80-\\xBF][\\x80-\\xBF])*$/;\n\nexport function hasMultibyte(str) {\n    let m = hasMultibyteRE.exec(str);\n    return m ? m[1] : false;\n}\n\nexport function isBinary(str) {\n    return !hasMultibyte(str);\n}\n\nexport function isASCII(str) {\n    return isASCIIRE.test(str);\n}\n\nexport function isUTF8(str) {\n    return isUTF8RE.test(str);\n}\n\nexport function isHEX(str) {\n    return isHEXRE.test(str);\n}\n\nexport function utf8bytes(str, allowAsyncChars) {\n    var l = str.length\n    ,   i = 0\n    ,   u = 0\n    ,   c\n    ,   a = -1\n    ,   asy = +!!allowAsyncChars\n    ;\n\n    for( ; i < l ; ) {\n        c = str.charCodeAt(i++);\n        if( c < 0x80 ) continue; // ASCII\n        if( 0xFF <= c ) return false; // has multi-byte\n\n        // async UTF8 character\n        if( (c & 0xC0) == 0x80 ) {\n            // Ignore async UTF8 characters at the beginning\n            if(asy == i) {\n                ++u;\n                ++asy;\n                continue;\n            }\n            return false;\n        }\n\n        // Check sync UTF8 bytes\n        a   = (c & 0xE0) !== 0xC0\n            ? (c & 0xF0) !== 0xE0\n            ? (c & 0xF8) !== 0xF0\n            ? false\n            : 3\n            : 2\n            : 1\n        ;\n        if(!a) return false; // Not an ASCII, nor sync UTF8 bytes\n\n        for( ; (u += 1) && a-- && i < l; ) {\n            c = str.charCodeAt(i++);\n            if((c & 0xC0) !== 0x80) {\n                return false; // Not an ASCII, nor sync UTF8 bytes\n            }\n        }\n    }\n\n    // Ignore async UTF8 characters at the end\n    if(~a && !allowAsyncChars) return false;\n\n    return u;\n}\n\nexport function utf8Encode(str) {\n    return unescape(encodeURI(str));\n}\n\nexport function utf8Decode(str) {\n    return decodeURIComponent(escape(str));\n}\n","import rawSha1 from './rawSha1';\nimport {\n    str2buffer,\n    toString,\n} from 'string-encode';\n\nexport default function sha1(str, asUtf8) {\n    let buf = str && str.BYTES_PER_ELEMENT ? str : str2buffer(str, asUtf8);\n    buf = rawSha1(buf);\n    buf.toString = toString;\n    return buf;\n}\n","import {\n    isLittleEndian, switchEndianness32,\n} from 'string-encode';\n\n/**\n * SHA1 on binary array\n *\n * @param   {Uint8Array}  b  Data to hash\n *\n * @return  {Uint8Array}  sha1 hash\n */\nexport default function rawSha1(b) {\n    let i = b.byteLength\n    ,   bs = 0\n    ,   A, B, C, D, G\n    ,   H = Uint32Array.from([A = 0x67452301, B = 0xEFCDAB89, ~A, ~B, 0xC3D2E1F0])\n    ,   W = new Uint32Array(80)\n    ,   nrWords = (i / 4 + 2) | 15\n    ,   words = new Uint32Array(nrWords+1)\n    ,   j\n    ;\n    words[nrWords] = i * 8;\n    words[i >> 2] |= 0x80 << (~i << 3);\n    for (;i--;) {\n        words[i >> 2] |= b[i] << (~i << 3);\n    }\n\n    for (A = H.slice(); bs < nrWords; bs += 16, A.set(H)) {\n        for (i = 0; i < 80;\n            A[0] = (\n                G = ((b = A[0]) << 5 | b >>> 27)\n                    + A[4]\n                    + (W[i] = (i<16) ? words[bs + i] : G << 1 | G >>> 31)\n                    + 0x5A827999,\n                B = A[1],\n                C = A[2],\n                D = A[3],\n                G + ((j = i / 5 >> 2)\n                    ? j != 2\n                        ? (B ^ C ^ D) + ( j & 2 ? 0x6FE0483D : 0x14577208 )\n                        : (B & C | B & D | C & D) + 0x34994343\n                    : B & C | ~B & D\n                )\n            )\n            , A[1] = b\n            , A[2] = B << 30 | B >>> 2\n            , A[3] = C\n            , A[4] = D\n            , ++i\n        ) {\n            G = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n        }\n\n        for(i = 5; i; ) H[--i] = H[i] + A[i];\n    }\n\n    if(isLittleEndian()) {\n        H = H.map(switchEndianness32);\n    }\n\n    return new Uint8Array(H.buffer, H.byteOffset, H.byteLength);\n}\n"],"names":["_isLittleEndian","chr","String","fromCharCode","buffer2bin","buf","start","len","Uint8Array","copy","undefined","byteLength","buffer","byteOffset","view8","apply","buffer2str","asUtf8","str","isASCIIRE","test","utf8Decode","err","str2buffer","m","hasMultibyteRE","exec","hasMultibyte","unescape","encodeURI","utf8Encode","length","charCodeAt","toString","enc","this","bpe","BYTES_PER_ELEMENT","reduce","r","c","padStart","btoa","isLittleEndian","Uint16Array","switchEndianness32","i","decodeURIComponent","escape","b","A","B","C","D","G","j","bs","H","Uint32Array","from","W","nrWords","words","slice","set","map","rawSha1"],"mappings":"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"}